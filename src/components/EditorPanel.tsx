'use client'
import { useState, useEffect } from 'react';
import { useAppStore } from '@/lib/store';
import { CodePreview } from './CodePreview';
import { Terminal } from './Terminal';
import { FileExplorer } from './FileExplorer';
import { File, Save, Play, Settings, Bug, Zap, AlertCircle } from 'lucide-react';
import { toast } from 'react-hot-toast';
import { useAccount } from 'wagmi';

interface FileContent {
  [key: string]: string;
}

export function EditorPanel() {
  const { currentContract, updateContract, addContract, setCurrentContract } = useAppStore();
  const { address } = useAccount();
  const [terminalOutput, setTerminalOutput] = useState<string[]>([
    '🚀 StormAI Development Terminal',
    '💡 Use your preferred compiler (hardhat, foundry, etc.)',
    '❓ Type "help" for available commands',
    '',
  ]);

  const [fileContents, setFileContents] = useState<FileContent>({});
  const [currentFile, setCurrentFile] = useState<string>('');
  const [isCompiling, setIsCompiling] = useState(false);
  const [isDebugging, setIsDebugging] = useState(false);

  const defaultContract = `// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract MyToken is ERC20, Ownable {
    constructor(
        string memory name,
        string memory symbol,
        uint256 initialSupply,
        address owner
    ) ERC20(name, symbol) Ownable(owner) {
        _mint(owner, initialSupply * 10 ** decimals());
    }

    function mint(address to, uint256 amount) public onlyOwner {
        _mint(to, amount);
    }
}`;

  const [code, setCode] = useState(currentContract?.sourceCode || defaultContract);
  const [activeTab, setActiveTab] = useState('terminal');

  // Initialize file contents
  useEffect(() => {
    const initialFiles: FileContent = {
      'MyToken.sol': currentContract?.sourceCode || defaultContract,
      'Token.test.js': `const { expect } = require("hardhat/chai");
const { ethers } = require("hardhat");

describe("MyToken", function () {
  let token;
  let owner;
  let addr1;

  beforeEach(async function () {
    [owner, addr1] = await ethers.getSigners();
    const Token = await ethers.getContractFactory("MyToken");
    token = await Token.deploy(
      "MyToken",
      "MTK", 
      ethers.utils.parseEther("1000000"),
      owner.address
    );
  });

  it("Should have correct initial supply", async function () {
    const totalSupply = await token.totalSupply();
    expect(totalSupply).to.equal(ethers.utils.parseEther("1000000"));
  });

  it("Should mint tokens when called by owner", async function () {
    await token.mint(addr1.address, ethers.utils.parseEther("1000"));
    const balance = await token.balanceOf(addr1.address);
    expect(balance).to.equal(ethers.utils.parseEther("1000"));
  });
});`,
      'deploy.js': `const hre = require("hardhat");

async function main() {
  const [deployer] = await hre.ethers.getSigners();

  console.log("Deploying contracts with the account:", deployer.address);
  console.log("Account balance:", (await deployer.getBalance()).toString());

  const Token = await hre.ethers.getContractFactory("MyToken");
  const token = await Token.deploy(
    "MyToken",
    "MTK",
    hre.ethers.utils.parseEther("1000000"),
    deployer.address
  );

  await token.deployed();

  console.log("Token deployed to:", token.address);
  console.log("Transaction hash:", token.deployTransaction.hash);
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });`,
      'hardhat.config.js': `require("@nomicfoundation/hardhat-toolbox");

/** @type import('hardhat/config').HardhatUserConfig */
module.exports = {
  solidity: {
    version: "0.8.20",
    settings: {
      optimizer: {
        enabled: true,
        runs: 200,
      },
    },
  },
  networks: {
    hardhat: {},
    localhost: {
      url: "http://127.0.0.1:8545"
    },
    sepolia: {
      url: process.env.SEPOLIA_URL || "",
      accounts: process.env.PRIVATE_KEY ? [process.env.PRIVATE_KEY] : []
    }
  },
  etherscan: {
    apiKey: process.env.ETHERSCAN_API_KEY
  }
};`,
      'package.json': `{
  "name": "stormai-contract",
  "version": "1.0.0",
  "description": "Smart contract project generated by StormAI",
  "scripts": {
    "compile": "hardhat compile",
    "test": "hardhat test",
    "deploy": "hardhat run scripts/deploy.js",
    "deploy:localhost": "hardhat run scripts/deploy.js --network localhost",
    "deploy:sepolia": "hardhat run scripts/deploy.js --network sepolia",
    "node": "hardhat node"
  },
  "devDependencies": {
    "@nomicfoundation/hardhat-toolbox": "^3.0.0",
    "hardhat": "^2.17.0"
  },
  "dependencies": {
    "@openzeppelin/contracts": "^4.9.0"
  }
}`
    };
    
    setFileContents(initialFiles);
    setCurrentFile(currentContract?.name ? `${currentContract.name}.sol` : 'MyToken.sol');
  }, [currentContract]);

  useEffect(() => {
    if (currentContract) {
      setCode(currentContract.sourceCode);
      setFileContents(prev => ({
        ...prev,
        [`${currentContract.name}.sol`]: currentContract.sourceCode
      }));
      setCurrentFile(`${currentContract.name}.sol`);
    }
  }, [currentContract]);

  const addTerminalLine = (line: string) => {
    setTerminalOutput(prev => [...prev, line]);
  };

  const handleFileSelect = (fileName: string) => {
    setCurrentFile(fileName);
    if (fileContents[fileName]) {
      setCode(fileContents[fileName]);
    }
  };

  const handleCreateNewFile = (fileName: string, content: string = '') => {
    setFileContents(prev => ({
      ...prev,
      [fileName]: content
    }));
    setCurrentFile(fileName);
    setCode(content);
    toast.success(`Created new file: ${fileName}`);
  };

  const handleSave = async () => {
    if (currentContract && address) {
      try {
        // Update file content
        setFileContents(prev => ({
          ...prev,
          [currentFile]: code
        }));

        // If editing the main contract file, update the contract
        if (currentFile.endsWith('.sol') && currentFile.includes(currentContract.name)) {
          updateContract(currentContract.id, {
            sourceCode: code,
            updatedAt: new Date(),
          });

          // Save to database
          const response = await fetch('/api/contracts', {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              contractId: currentContract.id,
              userId: address,
              sourceCode: code,
            }),
          });

          if (!response.ok) {
            throw new Error('Failed to save to database');
          }
        }

        addTerminalLine(`✅ Saved ${currentFile}`);
        toast.success('File saved successfully!');
      } catch (error) {
        console.error('Save error:', error);
        toast.error('Failed to save file');
        addTerminalLine(`❌ Failed to save ${currentFile}`);
      }
    } else if (address) {
      // Create new contract
      try {
        const contractName = extractContractName(code) || 'UntitledContract';
        const newContract = {
          id: Date.now().toString(),
          name: contractName,
          type: 'custom' as const,
          sourceCode: code,
          features: [],
          status: 'draft' as const,
          version: 1,
          createdAt: new Date(),
          updatedAt: new Date(),
        };

        // Save to database
        const response = await fetch('/api/contracts', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            userId: address,
            name: newContract.name,
            type: newContract.type,
            sourceCode: code,
            features: [],
            parameters: {},
          }),
        });

        if (!response.ok) {
          throw new Error('Failed to save to database');
        }

        const { contract } = await response.json();
        addContract(contract);
        setCurrentContract(contract);
        addTerminalLine(`✅ Created new contract: ${contractName}`);
        toast.success('New contract saved!');
      } catch (error) {
        console.error('Save error:', error);
        toast.error('Failed to save contract');
        addTerminalLine(`❌ Failed to create contract`);
      }
    } else {
      toast.error('Please connect your wallet to save files');
    }
  };

  const handleCodeChange = (newCode: string) => {
    setCode(newCode);
  };

  const handleTerminalCommand = (command: string) => {
    addTerminalLine(`$ ${command}`);
    
    const cmd = command.toLowerCase().trim();
    
    // Handle common commands
    switch (cmd) {
      case 'clear':
        setTerminalOutput(['🚀 StormAI Development Terminal', 'Ready for development...', '']);
        break;
        
      case 'help':
        addTerminalLine('📋 Available commands:');
        addTerminalLine('  clear          - Clear terminal');
        addTerminalLine('  help           - Show this help');
        addTerminalLine('  ls             - List files');
        addTerminalLine('  pwd            - Show current directory');
        addTerminalLine('  cat <file>     - Display file content');
        addTerminalLine('  touch <file>   - Create new file');
        addTerminalLine('');
        addTerminalLine('⚙️  Compilation:');
        addTerminalLine('  npm run compile      - Hardhat compilation');
        addTerminalLine('  forge build          - Foundry compilation');
        addTerminalLine('  solc Contract.sol    - Direct solc compilation');
        addTerminalLine('');
        addTerminalLine('🧪 Testing:');
        addTerminalLine('  npm test            - Run Hardhat tests');
        addTerminalLine('  forge test          - Run Foundry tests');
        addTerminalLine('');
        addTerminalLine('🚀 Deployment:');
        addTerminalLine('  npm run deploy      - Deploy with scripts');
        addTerminalLine('  forge script        - Foundry deployment');
        break;
        
      case 'ls':
        addTerminalLine('📁 Project Structure:');
        addTerminalLine('  contracts/');
        Object.keys(fileContents).forEach(file => {
          if (file.endsWith('.sol')) {
            addTerminalLine(`    📄 ${file}`);
          }
        });
        addTerminalLine('  test/');
        Object.keys(fileContents).forEach(file => {
          if (file.includes('test')) {
            addTerminalLine(`    📄 ${file}`);
          }
        });
        addTerminalLine('  scripts/');
        Object.keys(fileContents).forEach(file => {
          if (file.includes('deploy')) {
            addTerminalLine(`    📄 ${file}`);
          }
        });
        Object.keys(fileContents).forEach(file => {
          if (!file.endsWith('.sol') && !file.includes('test') && !file.includes('deploy')) {
            addTerminalLine(`  📄 ${file}`);
          }
        });
        break;
        
      case 'pwd':
        addTerminalLine('📍 /workspace/stormai-project');
        break;
        
      case 'compile':
      case 'npm run compile':
        handleCompile();
        break;
        
      case 'npm test':
      case 'test':
        handleRunTests();
        break;
        
      case 'npm run deploy':
        addTerminalLine('🚀 Starting deployment...');
        addTerminalLine('💡 Tip: Use the Deploy panel for interactive deployment');
        addTerminalLine('   or configure your network settings first');
        break;
        
      default:
        if (cmd.startsWith('cat ')) {
          const fileName = cmd.substring(4).trim();
          if (fileContents[fileName]) {
            addTerminalLine(`📖 Content of ${fileName}:`);
            addTerminalLine('─'.repeat(40));
            const lines = fileContents[fileName].split('\n');
            lines.slice(0, 20).forEach((line, index) => {
              addTerminalLine(`${(index + 1).toString().padStart(3)}: ${line}`);
            });
            if (lines.length > 20) {
              addTerminalLine(`... (${lines.length - 20} more lines)`);
            }
            addTerminalLine('─'.repeat(40));
          } else {
            addTerminalLine(`❌ File not found: ${fileName}`);
            addTerminalLine('💡 Use "ls" to see available files');
          }
        } else if (cmd.startsWith('touch ')) {
          const fileName = cmd.substring(6).trim();
          if (fileName) {
            handleCreateNewFile(fileName, '// New file created\n');
            addTerminalLine(`✅ Created file: ${fileName}`);
          } else {
            addTerminalLine('❌ Please specify a filename');
          }
        } else if (cmd.startsWith('cd ')) {
          addTerminalLine('🚫 Directory navigation not supported in browser terminal');
        } else if (cmd.startsWith('mkdir ') || cmd.startsWith('rm ')) {
          addTerminalLine('📁 File system operations: Use the file explorer');
        } else if (cmd.startsWith('git ')) {
          addTerminalLine('🌿 Git operations: Use your local git client');
          addTerminalLine('💡 This is a browser-based environment');
        } else if (cmd.startsWith('npm ') || cmd.startsWith('yarn ')) {
          addTerminalLine(`📦 Package command: ${command}`);
          addTerminalLine('💡 Use local terminal for package management');
        } else {
          addTerminalLine(`❓ Command not recognized: ${command}`);
          addTerminalLine('💡 Type "help" for available commands');
        }
    }
  };

  const handleCompile = async () => {
    setIsCompiling(true);
    addTerminalLine('🔄 Starting compilation...');
    addTerminalLine('📝 Analyzing Solidity files...');
    
    try {
      // Simulate compilation process
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      addTerminalLine('⚡ Compiling contracts...');
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Mock successful compilation
      addTerminalLine('✅ Compilation successful!');
      addTerminalLine('📊 Generated artifacts:');
      addTerminalLine('  - Bytecode: 0x608060405234801561001057...');
      addTerminalLine('  - ABI: Contract interface generated');
      addTerminalLine('💾 Artifacts saved to artifacts/ directory');
      
      // Update contract status if we have one
      if (currentContract && currentFile.endsWith('.sol')) {
        const mockBytecode = '0x608060405234801561001057600080fd5b50...';
        const mockABI = [
          {"type":"constructor","inputs":[]},
          {"type":"function","name":"totalSupply","outputs":[{"type":"uint256"}]},
        ];
        
        updateContract(currentContract.id, {
          status: 'compiled',
          bytecode: mockBytecode,
          abi: mockABI,
          updatedAt: new Date(),
        });
        
        addTerminalLine('🎯 Contract ready for deployment');
      }
      
      toast.success('Compilation completed successfully!');
    } catch (error) {
      addTerminalLine('❌ Compilation failed');
      addTerminalLine('💡 Check your Solidity syntax and imports');
      toast.error('Compilation failed');
    } finally {
      setIsCompiling(false);
    }
  };

  const handleRunTests = async () => {
    addTerminalLine('🧪 Running test suite...');
    addTerminalLine('📋 Loading test files...');
    
    try {
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      addTerminalLine('🔍 MyToken Test Suite');
      addTerminalLine('  ✅ Should have correct initial supply');
      await new Promise(resolve => setTimeout(resolve, 500));
      addTerminalLine('  ✅ Should mint tokens when called by owner');
      await new Promise(resolve => setTimeout(resolve, 500));
      addTerminalLine('  ✅ Should not allow non-owner to mint');
      await new Promise(resolve => setTimeout(resolve, 500));
      
      addTerminalLine('');
      addTerminalLine('📊 Test Results:');
      addTerminalLine('  3 passing (2.1s)');
      addTerminalLine('  0 failing');
      addTerminalLine('  Coverage: 95.2%');
      
      toast.success('All tests passed!');
    } catch (error) {
      addTerminalLine('❌ Some tests failed');
      toast.error('Test execution failed');
    }
  };

  const handleFormat = async () => {
    try {
      // Mock formatting - in real implementation, use Prettier or similar
      addTerminalLine('🎨 Formatting code...');
      
      // Simple formatting simulation
      const formatted = code
        .replace(/\{\s*\n/g, '{\n    ')
        .replace(/\n\s*\}/g, '\n}')
        .replace(/;\s*\n/g, ';\n');
      
      setCode(formatted);
      setFileContents(prev => ({
        ...prev,
        [currentFile]: formatted
      }));
      
      addTerminalLine('✅ Code formatted successfully');
      toast.success('Code formatted');
    } catch (error) {
      addTerminalLine('❌ Formatting failed');
      toast.error('Formatting failed');
    }
  };

  const handleDebug = async () => {
    setIsDebugging(!isDebugging);
    
    if (!isDebugging) {
      addTerminalLine('🐛 Debug mode enabled');
      addTerminalLine('🔍 Set breakpoints in your code');
      addTerminalLine('⏯️  Use step-through debugging');
      toast.success('Debug mode enabled');
    } else {
      addTerminalLine('🐛 Debug mode disabled');
      toast.success('Debug mode disabled');
    }
  };

  const extractContractName = (sourceCode: string): string | null => {
    const match = sourceCode.match(/contract\s+([A-Za-z_][A-Za-z0-9_]*)/);
    return match ? match[1] : null;
  };

  const handleQuickAction = (action: string) => {
    switch (action) {
      case 'format':
        handleFormat();
        break;
      case 'compile':
        handleCompile();
        break;
      case 'debug':
        handleDebug();
        break;
    }
  };

  const getCurrentFileName = () => {
    if (currentContract && currentFile.includes(currentContract.name)) {
      return `${currentContract.name}.sol`;
    }
    return currentFile || 'Contract.sol';
  };

  return (
    <div className="flex h-full bg-slate-900">
      {/* File Explorer */}
      <FileExplorer 
        onFileSelect={handleFileSelect}
        onCreateFile={handleCreateNewFile}
        currentFile={currentFile}
        fileContents={fileContents}
      />

      {/* Main Editor Area */}
      <div className="flex-1 flex flex-col">
        {/* Editor Header */}
        <div className="bg-slate-800 border-b border-slate-700 px-4 py-3 flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <div className="flex items-center space-x-2 bg-slate-700 px-3 py-2 rounded-lg">
              <File className="w-4 h-4 text-blue-400" />
              <span className="text-sm text-slate-200 font-medium">
                {getCurrentFileName()}
              </span>
              <div className="w-2 h-2 bg-green-400 rounded-full ml-2" title="Saved"></div>
            </div>
            
            {isCompiling && (
              <div className="flex items-center space-x-2 text-yellow-400 text-sm">
                <div className="animate-spin w-4 h-4 border-2 border-yellow-400 border-t-transparent rounded-full"></div>
                <span>Compiling...</span>
              </div>
            )}
            
            {isDebugging && (
              <div className="flex items-center space-x-2 text-red-400 text-sm">
                <Bug className="w-4 h-4" />
                <span>Debug Mode</span>
              </div>
            )}
          </div>

          {/* Editor Actions */}
          <div className="flex items-center space-x-3">
            <div className="text-xs text-slate-400 hidden md:block">
              Use terminal for compilation & testing
            </div>
            
            <div className="flex items-center space-x-2">
              <button
                onClick={() => handleQuickAction('format')}
                className="btn btn-sm btn-secondary"
                title="Format Code"
              >
                <Settings className="w-3 h-3" />
              </button>
              
              <button
                onClick={() => handleQuickAction('compile')}
                disabled={isCompiling}
                className="btn btn-sm btn-secondary"
                title="Compile"
              >
                {isCompiling ? (
                  <div className="animate-spin w-3 h-3 border border-current border-t-transparent rounded-full"></div>
                ) : (
                  <Zap className="w-3 h-3" />
                )}
              </button>
              
              <button
                onClick={() => handleQuickAction('debug')}
                className={`btn btn-sm ${isDebugging ? 'btn-warning' : 'btn-secondary'}`}
                title="Debug"
              >
                <Bug className="w-3 h-3" />
              </button>
              
              <button
                onClick={handleSave}
                className="btn btn-sm btn-primary"
                style={{
                  background: 'linear-gradient(135deg, #2563eb 0%, #1d4ed8 100%)',
                }}
              >
                <Save className="w-3 h-3 mr-1" />
                <span>Save</span>
              </button>
            </div>
          </div>
        </div>

        {/* Code Editor */}
        <div className="flex-1 relative">
          <CodePreview
            code={code}
            language={currentFile.endsWith('.sol') ? 'solidity' : 'javascript'}
            readOnly={false}
            onChange={handleCodeChange}
          />
          
          {/* Status Bar */}
          <div className="absolute bottom-0 left-0 right-0 bg-slate-700 border-t border-slate-600 px-4 py-1 flex items-center justify-between text-xs text-slate-400">
            <div className="flex items-center space-x-4">
              <span>{currentFile.endsWith('.sol') ? 'Solidity' : 'JavaScript'}</span>
              <span>UTF-8</span>
              <span>Line {code.split('\n').length}</span>
              <span>{code.length} characters</span>
            </div>
            <div className="flex items-center space-x-4">
              {currentContract?.status && (
                <span className={`flex items-center ${
                  currentContract.status === 'compiled' ? 'text-green-400' :
                  currentContract.status === 'deployed' ? 'text-blue-400' : 'text-yellow-400'
                }`}>
                  <div className={`w-2 h-2 rounded-full mr-1 ${
                    currentContract.status === 'compiled' ? 'bg-green-400' :
                    currentContract.status === 'deployed' ? 'bg-blue-400' : 'bg-yellow-400'
                  }`}></div>
                  {currentContract.status.charAt(0).toUpperCase() + currentContract.status.slice(1)}
                </span>
              )}
              <span className="flex items-center">
                <div className="w-2 h-2 bg-green-400 rounded-full mr-1"></div>
                Connected
              </span>
            </div>
          </div>
        </div>

        {/* Bottom Panel */}
        <div className="h-64 bg-slate-800 border-t border-slate-700">
          <div className="flex items-center justify-between px-4 py-2 border-b border-slate-700">
            <div className="flex space-x-4">
              {[
                { id: 'terminal', label: 'Terminal', icon: '>', count: terminalOutput.length },
                { id: 'output', label: 'Output', icon: '📄' },
                { id: 'problems', label: 'Problems', icon: '⚠️', count: 0 },
                { id: 'debug', label: 'Debug Console', icon: '🛠️' },
              ].map((tab) => (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={`text-sm px-3 py-1 rounded transition-colors flex items-center ${
                    activeTab === tab.id
                      ? 'text-blue-400 bg-slate-700'
                      : 'text-slate-400 hover:text-slate-200 hover:bg-slate-700'
                  }`}
                >
                  <span className="mr-2">{tab.icon}</span>
                  <span>{tab.label}</span>
                  {tab.count !== undefined && (
                    <span className="ml-1 bg-slate-600 text-xs px-1 rounded">
                      {tab.count}
                    </span>
                  )}
                </button>
              ))}
            </div>
            <div className="text-xs text-slate-500">
              Integrated development console
            </div>
          </div>
          
          <div className="h-52">
            {activeTab === 'terminal' && (
              <Terminal 
                output={terminalOutput}
                onCommand={handleTerminalCommand}
              />
            )}
            {activeTab === 'output' && (
              <div className="p-4 text-slate-400 text-sm space-y-2">
                <div className="flex items-center space-x-2">
                  <Play className="w-4 h-4" />
                  <span>Build output</span>
                </div>
                {isCompiling ? (
                  <div className="text-yellow-400">Compilation in progress...</div>
                ) : currentContract?.status === 'compiled' ? (
                  <div className="text-green-400">✅ Last compilation successful</div>
                ) : (
                  <div>No recent compilation output</div>
                )}
              </div>
            )}
            {activeTab === 'problems' && (
              <div className="p-4 text-slate-400 text-sm">
                <div className="flex items-center space-x-2 mb-2">
                  <AlertCircle className="w-4 h-4" />
                  <span>Problems (0)</span>
                </div>
                <div className="text-green-400">🎉 No problems detected in your code!</div>
              </div>
            )}
            {activeTab === 'debug' && (
              <div className="p-4 text-slate-400 text-sm space-y-2">
                <div className="flex items-center space-x-2">
                  <Bug className="w-4 h-4" />
                  <span>Debug Console</span>
                </div>
                {isDebugging ? (
                  <div className="text-yellow-400">🐛 Debug mode active. Set breakpoints to start debugging.</div>
                ) : (
                  <div>Debug console ready. Click the debug button to start.</div>
                )}
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}